generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoMovimiento {
  CREDITO
  DEBITO
}

enum MetodoPago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
  CHEQUE // Agregado para incluir cheques
}

enum EstadoPago {
  PENDIENTE
  COMPLETADO
  CANCELADO
}

enum TipoPago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
  CHEQUE // Agregado para incluir cheques
}

model Cliente {
  id          Int                @id @default(autoincrement())
  razonSocial String             @db.VarChar(255)
  direccion   String             @db.VarChar(255)
  cuit        String             @unique @db.VarChar(20)
  zona        String             @db.VarChar(100)
  telefono    String?            @db.VarChar(15)
  email       String?            @db.VarChar(255)
  saldo       Decimal             @default(0)
  ventas      Venta[]
  movimientos MovimientoCuenta[]
  pagos       Pago[]
  recibos     Recibo[]
  remitos     Remito[]
  cheques     Cheque[]          // Relación con cheques
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?          @updatedAt
  deletedAt   DateTime?          // Para implementar soft delete
}

model Proveedor {
  id          Int                @id @default(autoincrement())
  razonSocial String             @db.VarChar(255)
  direccion   String             @db.VarChar(255)
  cuit        String             @unique @db.VarChar(20)
  zona        String             @db.VarChar(100)
  telefono    String?            @db.VarChar(15)
  email       String?            @db.VarChar(255)
  saldo       Decimal             @default(0)
  compras     Compra[]
  movimientos MovimientoCuenta[]
  pagos       Pago[]
  recibos     Recibo[]
  remitos     Remito[]
  cheques     Cheque[]          // Relación con cheques
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?          @updatedAt
  deletedAt   DateTime?          // Para implementar soft delete
}

model Compra {
  id          Int       @id @default(autoincrement())
  fecha       DateTime  @default(now())
  total       Decimal    @default(0)
  proveedor   Proveedor @relation(fields: [proveedorId], references: [id])
  proveedorId Int
  archived    Boolean   @default(false)
  deletedAt   DateTime? // Para implementar soft delete
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  recibos     Recibo[]  @relation("CompraRecibos") // Relación con recibos
  remitos     Remito[]
}

model Recibo {
  id          Int       @id @default(autoincrement())
  fecha       DateTime  @default(now())
  monto       Decimal   @default(0)
  cliente     Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId   Int?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId Int?
  compra      Compra?   @relation("CompraRecibos") // Relación opuesta a Compra
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?  // Para implementar soft delete
}

model Venta {
  id        Int       @id @default(autoincrement())
  fecha     DateTime  @default(now())
  total     Decimal   @default(0)
  cliente   Cliente   @relation(fields: [clienteId], references: [id])
  clienteId Int
  archived  Boolean   @default(false)
  deletedAt DateTime? // Para implementar soft delete
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  recibos   Recibo[]
  remitos   Remito[]
}

model MovimientoCuenta {
  id          Int            @id @default(autoincrement())
  fecha       DateTime       @default(now())
  tipo        TipoMovimiento
  monto       Decimal          @default(0)
  saldo       Decimal          @default(0)
  cliente     Cliente?       @relation(fields: [clienteId], references: [id])
  clienteId   Int?
  proveedor   Proveedor?     @relation(fields: [proveedorId], references: [id])
  proveedorId Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
}

model Remito {
  id          Int       @id @default(autoincrement())
  fecha       DateTime  @default(now())
  total       Decimal   @default(0)
  cliente     Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId   Int?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?  // Para implementar soft delete
}

model Cheque {
  id          Int       @id @default(autoincrement())
  fecha       DateTime  @default(now())
  monto       Decimal   @default(0)
  cliente     Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId   Int?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?  // Para implementar soft delete
}

model Pago {
  id            Int              @id @default(autoincrement())
  fecha         DateTime         @default(now())
  monto         Decimal          @default(0)
  tipoPago      TipoPago         // Cambiado a enum
  estado        EstadoPago       @default(PENDIENTE)
  metodo        MetodoPago       // Corregido a tipo enum
  cliente       Cliente?         @relation(fields: [clienteId], references: [id])
  clienteId     Int?
  proveedor     Proveedor?       @relation(fields: [proveedorId], references: [id])
  proveedorId   Int?
  movimiento    MovimientoCuenta  @relation(fields: [movimientoId], references: [id])
  movimientoId  Int
  formaDePago   FormaDePago?     @relation(fields: [formaDePagoId], references: [id])
  formaDePagoId Int?
  cheque        Cheque?          @relation(fields: [chequeId], references: [id]) // Nueva relación
  chequeId      Int?             // ID del cheque utilizado para el pago
  createdAt     DateTime         @default(now())
  updatedAt     DateTime?        @updatedAt
  deletedAt     DateTime?        // Para implementar soft delete
}

model Cheque {
  id             Int       @id @default(autoincrement())
  numero         String    @db.VarChar(50) // Número de cheque
  monto          Decimal   @default(0)
  fechaEmision   DateTime  @default(now())
  fechaVencimiento DateTime?
  estado         String    // Estado del cheque (Pendiente, Cobrado, Cancelado)
  cliente        Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId      Int?
  proveedor      Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId    Int?
  isPaid         Boolean    @default(false) // Indica si el cheque ha sido pagado
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
}

model FormaDePago {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}